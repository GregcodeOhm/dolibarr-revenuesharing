<?php
/**
 * TransactionRepository.php
 * Repository pour la gestion des transactions
 * Module Revenue Sharing - Dolibarr
 */

class TransactionRepository
{
    /** @var DoliDB */
    private $db;

    /**
     * Constructor
     * @param DoliDB $db Database handler
     */
    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Récupère les transactions d'un collaborateur avec filtres
     * @param int $collaboratorId ID du collaborateur
     * @param array $filters Filtres (year, type, show_previsionnel)
     * @return array Liste des transactions
     */
    public function findByCollaborator($collaboratorId, $filters = [])
    {
        $sql = "SELECT t.*,
                c.label as contract_label,
                c.ref as contract_ref,
                c.status as contract_status,
                c.is_previsionnel as contract_is_previsionnel,
                f.ref as facture_ref,
                ff.ref as supplier_invoice_ref,
                ff.libelle as supplier_invoice_libelle
                FROM ".MAIN_DB_PREFIX."revenuesharing_account_transaction t
                LEFT JOIN ".MAIN_DB_PREFIX."revenuesharing_contract c ON c.rowid = t.fk_contract
                LEFT JOIN ".MAIN_DB_PREFIX."facture f ON f.rowid = t.fk_facture
                LEFT JOIN ".MAIN_DB_PREFIX."facture_fourn ff ON ff.rowid = t.fk_facture_fourn
                WHERE t.fk_collaborator = ".(int)$collaboratorId."
                AND t.status = 1";

        // Filtre année
        if (!empty($filters['year'])) {
            $sql .= " AND YEAR(t.transaction_date) = ".(int)$filters['year'];
        }

        // Filtre type de transaction
        if (!empty($filters['type'])) {
            $sql .= " AND t.transaction_type = '".$this->db->escape($filters['type'])."'";
        }

        // Filtre prévisionnels
        if (isset($filters['show_previsionnel']) && !$filters['show_previsionnel']) {
            $sql .= " AND (c.is_previsionnel IS NULL OR c.is_previsionnel = 0)";
        }

        $sql .= " ORDER BY t.transaction_date DESC, t.rowid DESC";

        $resql = $this->db->query($sql);
        if (!$resql) {
            return [];
        }

        $transactions = [];
        while ($obj = $this->db->fetch_object($resql)) {
            $transactions[] = $obj;
        }
        $this->db->free($resql);

        return $transactions;
    }

    /**
     * Calcule le solde d'un collaborateur
     * @param int $collaboratorId ID du collaborateur
     * @param array $filters Filtres optionnels (year, show_previsionnel)
     * @return object Objet contenant total_credits, total_debits, balance
     */
    public function calculateBalance($collaboratorId, $filters = [])
    {
        $sql = "SELECT
            COALESCE(SUM(CASE WHEN t.amount > 0 THEN t.amount ELSE 0 END), 0) as total_credits,
            COALESCE(SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END), 0) as total_debits,
            COALESCE(SUM(t.amount), 0) as balance
            FROM ".MAIN_DB_PREFIX."revenuesharing_account_transaction t
            LEFT JOIN ".MAIN_DB_PREFIX."revenuesharing_contract c ON c.rowid = t.fk_contract
            WHERE t.fk_collaborator = ".(int)$collaboratorId."
            AND t.status = 1";

        // Filtre année
        if (!empty($filters['year'])) {
            $sql .= " AND YEAR(t.transaction_date) = ".(int)$filters['year'];
        }

        // Filtre prévisionnels
        if (isset($filters['show_previsionnel']) && !$filters['show_previsionnel']) {
            $sql .= " AND (c.is_previsionnel IS NULL OR c.is_previsionnel = 0)";
        }

        $resql = $this->db->query($sql);
        if (!$resql) {
            return (object)[
                'total_credits' => 0,
                'total_debits' => 0,
                'balance' => 0
            ];
        }

        $result = $this->db->fetch_object($resql);
        $this->db->free($resql);

        return $result;
    }

    /**
     * Calcule le solde reporté (avant une année donnée)
     * @param int $collaboratorId ID du collaborateur
     * @param int $year Année de référence
     * @param bool $showPrevisionnel Inclure les prévisionnels
     * @return float Solde reporté
     */
    public function calculatePreviousBalance($collaboratorId, $year, $showPrevisionnel = true)
    {
        $sql = "SELECT COALESCE(SUM(t.amount), 0) as previous_balance
                FROM ".MAIN_DB_PREFIX."revenuesharing_account_transaction t
                LEFT JOIN ".MAIN_DB_PREFIX."revenuesharing_contract c ON c.rowid = t.fk_contract
                WHERE t.fk_collaborator = ".(int)$collaboratorId."
                AND t.status = 1
                AND YEAR(t.transaction_date) < ".(int)$year;

        if (!$showPrevisionnel) {
            $sql .= " AND (c.is_previsionnel IS NULL OR c.is_previsionnel = 0)";
        }

        $resql = $this->db->query($sql);
        if (!$resql) {
            return 0;
        }

        $obj = $this->db->fetch_object($resql);
        $this->db->free($resql);

        return (float)$obj->previous_balance;
    }

    /**
     * Récupère une transaction par son ID
     * @param int $id ID de la transaction
     * @return object|null Transaction ou null
     */
    public function findById($id)
    {
        $sql = "SELECT t.*, c.label as contract_label
                FROM ".MAIN_DB_PREFIX."revenuesharing_account_transaction t
                LEFT JOIN ".MAIN_DB_PREFIX."revenuesharing_contract c ON c.rowid = t.fk_contract
                WHERE t.rowid = ".(int)$id;

        $resql = $this->db->query($sql);
        if (!$resql || $this->db->num_rows($resql) == 0) {
            return null;
        }

        $result = $this->db->fetch_object($resql);
        $this->db->free($resql);

        return $result;
    }

    /**
     * Crée une nouvelle transaction
     * @param array $data Données de la transaction
     * @return int|false ID de la transaction créée ou false
     */
    public function create($data)
    {
        $sql = "INSERT INTO ".MAIN_DB_PREFIX."revenuesharing_account_transaction (
            fk_collaborator,
            transaction_date,
            amount,
            transaction_type,
            description,
            note_private,
            fk_contract,
            fk_facture,
            fk_facture_fourn,
            fk_user_creat,
            status
        ) VALUES (
            ".(int)$data['fk_collaborator'].",
            '".$this->db->escape($data['transaction_date'])."',
            ".(float)$data['amount'].",
            '".$this->db->escape($data['transaction_type'])."',
            '".$this->db->escape($data['description'])."',
            '".$this->db->escape($data['note_private'] ?? '')."',
            ".(int)($data['fk_contract'] ?? 0).",
            ".(int)($data['fk_facture'] ?? 0).",
            ".(int)($data['fk_facture_fourn'] ?? 0).",
            ".(int)($data['fk_user_creat'] ?? 0).",
            ".(int)($data['status'] ?? 1)."
        )";

        if ($this->db->query($sql)) {
            return $this->db->last_insert_id(MAIN_DB_PREFIX."revenuesharing_account_transaction");
        }

        return false;
    }

    /**
     * Met à jour une transaction
     * @param int $id ID de la transaction
     * @param array $data Données à mettre à jour
     * @return bool Succès ou échec
     */
    public function update($id, $data)
    {
        $fields = [];

        if (isset($data['amount'])) {
            $fields[] = "amount = ".(float)$data['amount'];
        }
        if (isset($data['description'])) {
            $fields[] = "description = '".$this->db->escape($data['description'])."'";
        }
        if (isset($data['note_private'])) {
            $fields[] = "note_private = '".$this->db->escape($data['note_private'])."'";
        }
        if (isset($data['transaction_type'])) {
            $fields[] = "transaction_type = '".$this->db->escape($data['transaction_type'])."'";
        }
        if (isset($data['fk_contract'])) {
            $fields[] = "fk_contract = ".(int)$data['fk_contract'];
        }
        if (isset($data['fk_facture_fourn'])) {
            $fields[] = "fk_facture_fourn = ".(int)$data['fk_facture_fourn'];
        }

        if (empty($fields)) {
            return false;
        }

        $sql = "UPDATE ".MAIN_DB_PREFIX."revenuesharing_account_transaction
                SET ".implode(', ', $fields)."
                WHERE rowid = ".(int)$id;

        return (bool)$this->db->query($sql);
    }

    /**
     * Supprime (soft delete) une transaction
     * @param int $id ID de la transaction
     * @return bool Succès ou échec
     */
    public function delete($id)
    {
        $sql = "UPDATE ".MAIN_DB_PREFIX."revenuesharing_account_transaction
                SET status = 0
                WHERE rowid = ".(int)$id;

        return (bool)$this->db->query($sql);
    }

    /**
     * Lie une transaction à un contrat
     * @param int $transactionId ID de la transaction
     * @param int $contractId ID du contrat
     * @return bool Succès ou échec
     */
    public function linkToContract($transactionId, $contractId)
    {
        $sql = "UPDATE ".MAIN_DB_PREFIX."revenuesharing_account_transaction
                SET fk_contract = ".(int)$contractId."
                WHERE rowid = ".(int)$transactionId;

        return (bool)$this->db->query($sql);
    }

    /**
     * Lie une transaction à une facture fournisseur
     * @param int $transactionId ID de la transaction
     * @param int $invoiceId ID de la facture fournisseur
     * @return bool Succès ou échec
     */
    public function linkToSupplierInvoice($transactionId, $invoiceId)
    {
        $sql = "UPDATE ".MAIN_DB_PREFIX."revenuesharing_account_transaction
                SET fk_facture_fourn = ".(int)$invoiceId."
                WHERE rowid = ".(int)$transactionId;

        return (bool)$this->db->query($sql);
    }

    /**
     * Délie une transaction d'un contrat
     * @param int $transactionId ID de la transaction
     * @return bool Succès ou échec
     */
    public function unlinkFromContract($transactionId)
    {
        $sql = "UPDATE ".MAIN_DB_PREFIX."revenuesharing_account_transaction
                SET fk_contract = NULL
                WHERE rowid = ".(int)$transactionId;

        return (bool)$this->db->query($sql);
    }

    /**
     * Délie une transaction d'une facture fournisseur
     * @param int $transactionId ID de la transaction
     * @return bool Succès ou échec
     */
    public function unlinkFromSupplierInvoice($transactionId)
    {
        $sql = "UPDATE ".MAIN_DB_PREFIX."revenuesharing_account_transaction
                SET fk_facture_fourn = NULL
                WHERE rowid = ".(int)$transactionId;

        return (bool)$this->db->query($sql);
    }

    /**
     * Calcule les statistiques des transactions
     * @param int $collaboratorId ID du collaborateur
     * @param array $filters Filtres optionnels
     * @return object Statistiques
     */
    public function getStatistics($collaboratorId, $filters = [])
    {
        $sql = "SELECT
            COUNT(*) as total_transactions,
            COUNT(CASE WHEN amount > 0 THEN 1 END) as total_credits_count,
            COUNT(CASE WHEN amount < 0 THEN 1 END) as total_debits_count,
            COALESCE(AVG(CASE WHEN amount > 0 THEN amount END), 0) as avg_credit,
            COALESCE(AVG(CASE WHEN amount < 0 THEN ABS(amount) END), 0) as avg_debit,
            MIN(transaction_date) as first_transaction_date,
            MAX(transaction_date) as last_transaction_date
            FROM ".MAIN_DB_PREFIX."revenuesharing_account_transaction t
            LEFT JOIN ".MAIN_DB_PREFIX."revenuesharing_contract c ON c.rowid = t.fk_contract
            WHERE t.fk_collaborator = ".(int)$collaboratorId."
            AND t.status = 1";

        if (!empty($filters['year'])) {
            $sql .= " AND YEAR(t.transaction_date) = ".(int)$filters['year'];
        }

        if (isset($filters['show_previsionnel']) && !$filters['show_previsionnel']) {
            $sql .= " AND (c.is_previsionnel IS NULL OR c.is_previsionnel = 0)";
        }

        $resql = $this->db->query($sql);
        if (!$resql) {
            return (object)[];
        }

        $result = $this->db->fetch_object($resql);
        $this->db->free($resql);

        return $result;
    }
}
